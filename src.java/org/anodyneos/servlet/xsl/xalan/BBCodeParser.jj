options {
    LOOKAHEAD = 1;
    FORCE_LA_CHECK = true;
    IGNORE_CASE = true;
    DEBUG_PARSER = false;
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(BBCodeParser)

package org.anodyneos.servlet.xsl.xalan;

public abstract class BBCodeParser {

    public static final String TAG_BOLD = "b";
    public static final String TAG_ITALICS = "i";
    public static final String TAG_UNDERLINE = "u";
    public static final String TAG_STRIKETHROUGH = "s";
    public static final String TAG_QUOTE = "quote";
    public static final String TAG_CODE = "code";
    public static final String TAG_URL = "url";
    public static final String TAG_COLOR = "color";
    public static final String TAG_SIZE = "size";

    private BBCodeTagCloseHelper tagCloseHelper = new BBCodeTagCloseHelper(this);

    protected abstract void processWord(String s);
    protected abstract void processSpace(String s);
    protected abstract void processEol(String s);
    protected abstract void processUrl(String s);
    protected abstract void processEmail(String s);
    protected abstract void processFtp(String s);
    protected abstract void processWww(String s);

    protected abstract void processInvalidOpen(String s);
    protected abstract void processCloseTag(String s);

    protected abstract void processOpenSimpleTag(String s);
    protected abstract void processOpenUrlTag(String s);
    protected abstract void processOpenUrlFtpTag(String s);
    protected abstract void processOpenUrlWwwTag(String s);
    protected abstract void processOpenUrlEmailTag(String s);
    protected abstract void processOpenColorTag(String s);
    protected abstract void processOpenSizeTag(String s);

}

PARSER_END(BBCodeParser)

/*
    Whitespace not forced after A or B

    Path not allowed (mozilla):
       "\"", "'", ")", "<", ">", "]", "|", "}"
       Path cannot end in ".", ";"
       Path section of URLs must start with either "/" or "?".
*/

TOKEN :
{
    <SIMPLE_TAG_START: ("[" <SIMPLE_TAG> "]") | ((<SPACE> | <EOL>)* "[" <BLOCK_TAG> "]" (<SPACE> | <EOL>)*) > // throw away whitespace around blocks
|   <SIMPLE_TAG_END:   ("[/" <SIMPLE_TAG> "]") | ((<SPACE> | <EOL>)* "[/" <BLOCK_TAG> "]" (<SPACE> | <EOL>)*) >
|   <URL_TAG_START: "[url=" <URL_FULL> "]" >
|   <URL_FTP_TAG_START: "[url=" <URL_FTP> "]" >
|   <URL_WWW_TAG_START: "[url=" <URL_WWW> "]" >
|   <URL_EMAIL_TAG_START: "[url=" <EMAIL> "]" >
|   <URL_TAG_END:   "[/url]" >
|   <COLOR_TAG_START: "[color=" <COLOR> "]" >
|   <COLOR_TAG_END: "[/color]" >
|   <SIZE_TAG_START:    "[size=" (["0"-"9"]){1,3} "]" >
|   <SIZE_TAG_END:      "[/size]" >
|   <URL_FULL_TAG:  "[url]" <URL_FULL> "[/url]" >
|   <BAD_START:     "[" >
|   <ESCAPED_START: "[[" >
|   <URL_FULL:      <URL_MAILTO> | (<PROTOCOL> "://" <DOMAIN> (<PORT>)? (<PATH_URL>)?) >
|   <URL_FTP:       <DOMAIN_FTP> (<PATH_URL>)? >
|   <URL_WWW:       <DOMAIN_WWW> (<PORT>)? (<PATH_URL>)? >
|   <EMAIL:         <EMAIL_USER> "@" <DOMAIN_BIG> >
|   <SPACE:         ([" ", "\t", "\f"])+  >
|   <EOL:           "\n" | "\r" | "\r\n"  >
|   <NONE:          "" > : WORD_OK // as last resort, try matching a word
|   <#URL_MAILTO:   "mailto:" <EMAIL_USER> "@" <DOMAIN> >
|   <#EMAIL_USER:   (["-", "." ,"0"-"9", ":", "=", "A"-"Z", "_", "a"-"z", "~" ])+ >
|   <#DOMAIN_FTP:   <FTP_PREFIX> "." <DOMAIN> >
|   <#DOMAIN_WWW:   <DOMAIN> "." <TLD>
|                   <WWW_PREFIX> "." <DOMAIN> >
|   <#DOMAIN_BIG:   (<DOMAIN_PART> ".")+ <DOMAIN_PART> >
|   <#PORT:         ":" (["0"-"9"])+ >
|   <#DOMAIN:       (<DOMAIN_PART> ".")* <DOMAIN_PART> >
|   <#DOMAIN_PART:  (  ["a"-"z"] (["a"-"z", "0"-"9", "-"])* (["a"-"z", "0"-"9"])+  )
|                   (  ["a"-"z"] (["a"-"z", "0"-"9"])*) >
|   <#PROTOCOL:     "news" | "http" | "https" | "ftp" | "mailto" >
|   <#TLD:          "com" | "net" | "org" | "gov" | "edu" | "biz" | "info" | "mil" >
|   <#WWW_PREFIX:   "www" >
|   <#FTP_PREFIX:   "ftp" >
|   <#PATH_URL:     ("/") | (("/" | "?") <PATH>) >
|   <#PATH:         ([  "!","#","$","%","&","(","*","+", ",","-",".","/","0"-"9",":",";",
                        "=", "?","@","A"-"Z",/*"[",*/"\\","^", "_","`","a"-"z","{","~" ] | "[[")*
                    ([  "!","#","$","%","&","(","*","+", ",","-",    "/","0"-"9",":",
                        "=", "?","@","A"-"Z",/*"[",*/"\\","^", "_","`","a"-"z","{","~" ] | "[[")+ >
|   <#SIMPLE_TAG:   "b" | "i" | "u" | "s" >
|   <#BLOCK_TAG:    "quote" | "code" >
|   <#COLOR:        "black"|"green"|"silver"|"lime"|"gray"|"olive"|"white" |"yellow"|
                    "maroon"|"navy"|"red"|"blue"|"purple"|"teal"|"fuchsia"|"aqua"|
                    ("#"(<HEXDIGIT>){3})|
                    ("#"(<HEXDIGIT>){6}) >
|   <#HEXDIGIT:     ["A"-"F", "a"-"f", "0"-"9"] >

}

<WORD_OK>
TOKEN :
{
    // match characters and punctuation seperately
    // in order to match things HTML text, for example:
    // <a href="http://www.news.com">www.news.com</a>
    //<WORD:          (~[" ", "\t", "\n", "\r", "\f"])+ > : DEFAULT
    <WORD:          <CHARS> | <PUNCTUATION> > : DEFAULT
|   <#CHARS:        (["a"-"z"])+ >
|   <#PUNCTUATION:  (~["a"-"z", "[", " ", "\t", "\n", "\r", "\f"])+ >
}

void Input(): { }
{
    (
        badOpen()
        | simpleTagOpen() | simpleTagClose()
        | sizeTagOpen() | sizeTagClose()
        | colorTagOpen() | colorTagClose()
        | urlTagOpen() | urlTagClose()
        | urlEmailTagOpen() | urlWwwTagOpen() | urlFtpTagOpen()
        | urlFullTag()
        | simpleContent()
    )* <EOF>
    {
        tagCloseHelper.endDocument();
    }
}

/*
void newLine2() :
{
}
{
    <NEW_LINE2>
}
*/

void badOpen() :
{
    Token t = null;
}
{
    t=<BAD_START>
    {
        processInvalidOpen(t.image);
    }
}

void simpleTagOpen() :
{
    Token t = null;
}
{
    t=<SIMPLE_TAG_START>
    {
        String image = t.image.trim();
        String tag = image.substring(1,image.length()-1);
        tagCloseHelper.openTag(tag);
        processOpenSimpleTag(tag);
    }
}

void simpleTagClose() :
{
    Token t = null;
}
{
    t=<SIMPLE_TAG_END>
    {
        String image = t.image.trim();
        String tag = image.substring(2,image.length()-1);
        tagCloseHelper.closeTag(tag);
    }
}

void urlFullTag() : //[url]http://example.com[/url]
{
    Token t = null;
}
{
    t=<URL_FULL_TAG>
    {
        String image = t.image;
        String val = image.substring(5,image.length()-6).replace("[[", "[");
        processUrl(val);
    }
}

void urlTagOpen() :
{
    Token t = null;
}
{
    t=<URL_TAG_START>
    {
        String image = t.image;
        String val = image.substring(5,image.length()-1).replace("[[", "[");
        tagCloseHelper.openTag(TAG_URL);
        processOpenUrlTag(val);
    }
}

void urlFtpTagOpen() :
{
    Token t = null;
}
{
    t=<URL_FTP_TAG_START>
    {
        String image = t.image;
        String val = image.substring(5,image.length()-1).replace("[[", "[");
        tagCloseHelper.openTag(TAG_URL);
        processOpenUrlFtpTag(val);
    }
}

void urlEmailTagOpen() :
{
    Token t = null;
}
{
    t=<URL_EMAIL_TAG_START>
    {
        String image = t.image;
        String val = image.substring(5,image.length()-1).replace("[[", "[");
        tagCloseHelper.openTag(TAG_URL);
        processOpenUrlEmailTag(val);
    }
}

void urlWwwTagOpen() :
{
    Token t = null;
}
{
    t=<URL_WWW_TAG_START>
    {
        String image = t.image;
        String val = image.substring(5,image.length()-1).replace("[[", "[");
        tagCloseHelper.openTag(TAG_URL);
        processOpenUrlWwwTag(val);
    }
}

void urlTagClose() :
{
}
{
    <URL_TAG_END>
    {
        tagCloseHelper.closeTag(TAG_URL);
    }
}

void colorTagOpen() :
{
    Token t = null;
}
{
    t=<COLOR_TAG_START>
    {
        String image = t.image;
        String val = image.substring(7,image.length()-1);
        tagCloseHelper.openTag(TAG_COLOR);
        processOpenColorTag(val);
    }
}

void colorTagClose() :
{
}
{
    <COLOR_TAG_END>
    {
        tagCloseHelper.closeTag(TAG_COLOR);
    }
}

void sizeTagOpen() :
{
    Token t = null;
}
{
    t=<SIZE_TAG_START>
    {
        String image = t.image;
        String val = image.substring(6,image.length()-1);
        tagCloseHelper.openTag(TAG_SIZE);
        processOpenSizeTag(val);
    }
}

void sizeTagClose() :
{
}
{
    <SIZE_TAG_END>
    {
        tagCloseHelper.closeTag(TAG_SIZE);
    }
}

void simpleContent():
{
    Token t = null;
}
{
    (
        (
              t = <EMAIL>
            | t = <URL_FULL>
            | t = <URL_WWW>
            | t = <URL_FTP>
            | t = <SPACE>
            | t = <EOL>
            | t = <NONE>        // enable word matching
            | t = <WORD>
            | t = <ESCAPED_START>
        )
        {
            if (t.kind == EMAIL     ) processEmail(t.image);
            if (t.kind == URL_FULL  ) processUrl(t.image.replace("[[", "["));
            if (t.kind == URL_WWW   ) processWww(t.image.replace("[[", "["));
            if (t.kind == URL_FTP   ) processFtp(t.image.replace("[[", "["));
            if (t.kind == WORD      ) processWord(t.image);
            if (t.kind == SPACE     ) processSpace(t.image);
            if (t.kind == EOL       ) processEol(t.image);
            if (t.kind == ESCAPED_START  ) processWord("[");
        }
    )
}
